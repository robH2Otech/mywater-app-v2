
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      // Try to get role from custom claims, fallback to empty string
      return request.auth != null && 'role' in request.auth.token ? request.auth.token.role : '';
    }
    
    function getUserCompany() {
      // Try to get company from custom claims, fallback to empty string
      return request.auth != null && 'company' in request.auth.token ? request.auth.token.company : '';
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && getUserRole() == 'superadmin';
    }
    
    function isAdmin() {
      return isAuthenticated() && (getUserRole() == 'admin' || getUserRole() == 'superadmin');
    }
    
    function isTechnician() {
      return isAuthenticated() && (getUserRole() == 'technician' || isAdmin());
    }
    
    function canAccessCompany(companyId) {
      return isSuperAdmin() || getUserCompany() == companyId || getUserCompany() == '';
    }
    
    function isValidRole(role) {
      return role in ['superadmin', 'admin', 'technician', 'user'];
    }
    
    function isValidEmail(email) {
      return email.matches('.*@.*\\..*');
    }
    
    // Business users collection - RELAXED rules for debugging
    match /app_users_business/{userId} {
      // Allow authenticated users to read their own data or any data during debugging
      allow read: if isAuthenticated();
      
      // Allow users to create their own document or admins to create any
      allow create: if isAuthenticated() && (
        request.auth.uid == userId ||
        isValidRole(request.resource.data.role) &&
        isValidEmail(request.resource.data.email)
      );
      
      // Allow updates for own document or by admins
      allow update: if isAuthenticated() && (
        request.auth.uid == userId || 
        getUserRole() in ['admin', 'superadmin']
      ) && isValidRole(request.resource.data.role);
      
      // Allow deletion by superadmins or admins
      allow delete: if isAuthenticated() && getUserRole() in ['admin', 'superadmin'];
    }
    
    // Private users collection - RELAXED rules
    match /app_users_privat/{userId} {
      allow read, write: if isAuthenticated();
    }
    
    // All other collections - RELAXED rules for debugging
    match /units/{unitId} {
      allow read, write: if isAuthenticated();
    }
    
    match /measurements/{measurementId} {
      allow read, write: if isAuthenticated();
    }
    
    match /alerts/{alertId} {
      allow read, write: if isAuthenticated();
    }
    
    match /client_requests/{requestId} {
      allow read, write: if isAuthenticated();
    }
    
    match /locations/{locationId} {
      allow read, write: if isAuthenticated();
    }
    
    match /filters/{filterId} {
      allow read, write: if isAuthenticated();
    }
    
    match /reports/{reportId} {
      allow read, write: if isAuthenticated();
    }
    
    // Audit logs - only superadmins can access
    match /audit_logs/{logId} {
      allow read: if isSuperAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
