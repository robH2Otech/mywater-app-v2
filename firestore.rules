
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserEmail() {
      return request.auth != null ? request.auth.token.email : '';
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && getUserEmail() in [
        'rob.istria@gmail.com',
        'robert.slavec@gmail.com', 
        'aljaz.slavec@gmail.com'
      ];
    }
    
    // GLOBAL SUPERADMIN RULE - SUPERADMIN CAN DO EVERYTHING EVERYWHERE
    match /{document=**} {
      allow read, write, create, update, delete: if isSuperAdmin();
    }
    
    // Simple authenticated access for all other users
    match /units/{unitId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    match /measurements/{measurementId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    match /alerts/{alertId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    match /filters/{filterId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    match /client_requests/{requestId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    match /locations/{locationId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    match /reports/{reportId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    // Business users collection
    match /app_users_business/{userId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    // Private users collection
    match /app_users_privat/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Orders - private users can see their own orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && isAuthenticated() && request.auth.uid == resource.data.user_id;
      allow write: if false; // Only functions can write orders
    }
    
    // Referral system
    match /referral_codes/{codeId} {
      allow read, write, create, update, delete: if isAuthenticated() && request.auth.uid == resource.data.user_id;
    }
    
    match /referrals/{referralId} {
      allow read: if isAuthenticated() && request.auth.uid == resource.data.referrer_id;
      allow write: if false; // Only functions can write referrals
    }
    
    // Audit logs - only superadmins can read, all authenticated users can create
    match /audit_logs/{logId} {
      allow read: if false; // Superadmin access handled by global rule above
      allow create: if isAuthenticated();
      allow update, delete: if false;
    }
    
    // System notifications
    match /notifications/{notificationId} {
      allow read, write, create, update, delete: if isAuthenticated();
    }
    
    // IoT data collection - allow unauthenticated writes for testing
    match /units/{unitId}/data/{docId} {
      allow read: if false;
      allow write: if request.auth == null;
    }
    
    // Location history with automatic cleanup
    match /locationHistory/{historyId} {
      allow read: if isAuthenticated();
      allow write: if false; // Only functions can write location history
      allow create: if false; // Only functions can create location history
      allow delete: if false; // Only automatic cleanup
    }
  }
}
