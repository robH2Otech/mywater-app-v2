
import React, { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, FileText, Leaf, Building, TrendingUp, Calendar } from "lucide-react";
import { useUnits } from "@/hooks/useUnits";
import { calculateBusinessUVCMetrics, calculateCostSavings, UVC_CONSTANTS } from "@/utils/businessUvcCalculations";
import { useMemo } from "react";
import { toast } from "sonner";

interface ESGReportDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  period: "day" | "month" | "year" | "all-time";
}

export function ESGReportDialog({ open, onOpenChange, period }: ESGReportDialogProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const { data: units = [] } = useUnits();

  // Calculate metrics for the report
  const realTotalVolume = useMemo(() => {
    return units.reduce((total, unit) => {
      const unitVolume = Number(unit.total_volume) || 0;
      return total + unitVolume;
    }, 0);
  }, [units]);

  const businessMetrics = useMemo(() => {
    return calculateBusinessUVCMetrics(realTotalVolume, {
      flowRate: UVC_CONSTANTS.TYPICAL_FLOW_RATES.medium,
      operatingHours: 16,
      daysInPeriod: period === "day" ? 1 : period === "month" ? 30 : period === "year" ? 365 : 730
    });
  }, [realTotalVolume, period]);

  const costSavings = useMemo(() => {
    return calculateCostSavings(businessMetrics);
  }, [businessMetrics]);

  const handleGenerateReport = async (reportType: string) => {
    setIsGenerating(true);
    
    try {
      // Create a simple text report content
      const reportContent = `ESG IMPACT REPORT - ${reportType.toUpperCase()}
Generated: ${new Date().toLocaleString()}
Period: ${period.toUpperCase()}

=== ENVIRONMENTAL IMPACT ===
Water Processed: ${businessMetrics.waterProcessed.toFixed(2)} m³
Energy Saved: ${businessMetrics.energySaved.toFixed(2)} kWh
Water Waste Prevented: ${businessMetrics.waterWastePrevented.toFixed(2)} m³
System Uptime: ${businessMetrics.systemUptime.toFixed(1)}%

=== FINANCIAL IMPACT ===
Total Cost Savings: €${costSavings.totalCostSavings.toFixed(2)}
Energy Cost Savings: €${costSavings.energyCostSavings.toFixed(2)}
Water Cost Savings: €${costSavings.waterCostSavings.toFixed(2)}
Operational Savings: €${costSavings.operationalSavings.toFixed(2)}

=== OPERATIONAL METRICS ===
Units Connected: ${units.length}
Operating Hours: ${businessMetrics.operationalHours.toFixed(0)} hours
Maintenance Efficiency: ${businessMetrics.maintenanceEfficiency.toFixed(1)}%

=== SUSTAINABILITY GOALS ===
- Reduced water waste by ${businessMetrics.waterWastePrevented.toFixed(1)} m³
- Saved ${businessMetrics.energySaved.toFixed(1)} kWh of energy
- Achieved ${businessMetrics.systemUptime.toFixed(1)}% system uptime
- Generated €${costSavings.totalCostSavings.toFixed(2)} in cost savings

Report generated by MYWATER ESG Analytics Platform`;

      // Create and download the file
      const blob = new Blob([reportContent], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `ESG_Report_${reportType}_${period}_${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);

      toast.success("ESG Report generated and downloaded successfully!");
    } catch (error) {
      console.error("Error generating report:", error);
      toast.error("Failed to generate ESG report");
    } finally {
      setTimeout(() => setIsGenerating(false), 1000);
    }
  };

  const reportTypes = [
    {
      id: "environmental",
      title: "Environmental Impact",
      description: "Water processing, energy savings, and waste reduction metrics",
      icon: Leaf,
      color: "from-green-500 to-emerald-500"
    },
    {
      id: "operational",
      title: "Operational Performance",
      description: "System efficiency, uptime, and maintenance metrics",
      icon: TrendingUp,
      color: "from-blue-500 to-cyan-500"
    },
    {
      id: "financial",
      title: "Financial Impact",
      description: "Cost savings and economic benefits analysis",
      icon: Building,
      color: "from-purple-500 to-pink-500"
    },
    {
      id: "compliance",
      title: "ESG Compliance Summary",
      description: "Comprehensive ESG metrics for stakeholder reporting",
      icon: FileText,
      color: "from-amber-500 to-orange-500"
    }
  ];

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto bg-spotify-darker border-spotify-accent">
        <DialogHeader>
          <DialogTitle className="text-white flex items-center gap-2">
            <Download className="h-5 w-5 text-mywater-blue" />
            Export ESG Reports
            <Badge variant="secondary" className="ml-2">
              {period.toUpperCase()}
            </Badge>
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6">
          {/* Report Summary */}
          <Card className="bg-gradient-to-r from-mywater-blue/10 to-cyan-500/10 border-mywater-blue/30">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Report Summary - {period.charAt(0).toUpperCase() + period.slice(1)} Period
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <div className="text-2xl font-bold text-blue-400">{businessMetrics.waterProcessed.toFixed(1)}</div>
                  <div className="text-sm text-gray-400">m³ Water Processed</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-green-400">€{costSavings.totalCostSavings.toFixed(0)}</div>
                  <div className="text-sm text-gray-400">Total Savings</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-yellow-400">{businessMetrics.energySaved.toFixed(1)}</div>
                  <div className="text-sm text-gray-400">kWh Energy Saved</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-purple-400">{units.length}</div>
                  <div className="text-sm text-gray-400">Units Connected</div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Report Types */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {reportTypes.map((report) => (
              <Card key={report.id} className="bg-spotify-dark border-spotify-accent/30 hover:shadow-lg transition-all duration-300">
                <CardHeader>
                  <CardTitle className="text-white flex items-center gap-2">
                    <div className={`p-2 rounded-lg bg-gradient-to-r ${report.color}`}>
                      <report.icon className="h-4 w-4 text-white" />
                    </div>
                    {report.title}
                  </CardTitle>
                  <p className="text-gray-400 text-sm">{report.description}</p>
                </CardHeader>
                <CardContent>
                  <Button
                    onClick={() => handleGenerateReport(report.id)}
                    disabled={isGenerating}
                    className={`w-full bg-gradient-to-r ${report.color} hover:opacity-90 transition-opacity`}
                  >
                    <Download className="h-4 w-4 mr-2" />
                    {isGenerating ? "Generating..." : "Download Report"}
                  </Button>
                </CardContent>
              </Card>
            ))}
          </div>

          {realTotalVolume === 0 && (
            <Card className="bg-yellow-900/20 border-yellow-600/30">
              <CardContent className="p-4">
                <div className="flex items-center gap-2 text-yellow-200">
                  <FileText className="h-5 w-5" />
                  <span className="text-sm">
                    Reports will be more comprehensive when units start processing water and generating real data.
                  </span>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
